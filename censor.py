# for more info: https://murix.ru/files/ftg
# by xadjilut, 2021

import random
import re

from .. import loader, utils
from telethon.tl.types import Message, Channel


@loader.tds
class CensorMod(loader.Module):
    """–§–∏–ª—å—Ç—Ä –æ–±—Å—Ü–µ–Ω–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ –Ω–∞ —Ä–µ–≥—É–ª—è—Ä –æ—á–∫–µ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"""

    strings = {
        "name": "censor",
        "censor_cmd": "–ß–∏—Ç–∞–π <code>.help censor</code>",
        "cens_yes": "‚ùå<b>–ú–∞—Ç –Ω–µ –Ω—É–∂–µ–Ω, —Ä–µ–¥–∏—Å–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω</b>\n\n%text%",
        "cens_no": "üëå<b>–ú–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n",
        "cens_null": "‚ùì<b>–ê —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å?</b>",
        "censon_not_admin": "üôà<b>–ù–µ –º–æ–≥—É —É–¥–∞–ª—è—Ç—å —á—É–∂–∏–µ –ø–æ—Å—Ç—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ</b>",
        "censon_invalid": "‚ùóÔ∏è<b>–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º</b>",
        "censon_cmd_1": "üîí<b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞ –≤ —á–∞—Ç–µ —Å –∞–π–¥–∏</b> <code>%id%</code>",
        "censon_cmd_2": "üëÆ<b>–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞ –≤ —á–∞—Ç–µ —Å –∞–π–¥–∏</b> <code>%id%</code>",
        "censoff_cmd": "üîå<b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —á–∞—Ç–µ —Å –∞–π–¥–∏</b> <code>%id%</code>",
        "censoff_all": "üîå<b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö</b>",
        "censlist_cmd": "üìÉ<b>–ì–¥–µ —Ñ–∏–ª—å—Ç—Ä—É—é –º–∞—Ç:</b>\n\n%list%",
        "censlist_empty": "üîå<b>–ù–∏–≥–¥–µ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É—é –º–∞—Ç.</b>",
        "censx_cmd": "üìÑ<b>–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n%list%",
        "censx_add": "üìù<b>–ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã</b>",
        "censx_del": "üóë<b>–ò—Å–∫–ª—é—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã</b>",
        "censx_empty": "üóë<b>–ù–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π</b>",
        "censx_invalid": "üêµ<b>–ù–µ–ø–æ–Ω–µ–ª, –Ω—É –ª–∞–Ω</b>",
    }

    def __init__(self):
        self.name = self.strings["name"]

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.me_id = (await client.get_me()).id

    async def censorcmd(self, message):
        """–ù—É–ª–µ–≤–æ–π —É–∫–∞–∑–∞—Ç–µ–ª—å, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–ø—Ä–∞–≤–∫—É"""
        await message.edit(self.strings["censor_cmd"])

    async def censcmd(self, message):
        """.cens <reply>|<text>
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—Å—Ü–µ–Ω–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏"""
        args = utils.get_args_raw(message)
        if not message.is_reply and not args:
            return await message.edit(self.strings["cens_null"])
        if message.is_reply:
            reply = await message.get_reply_message()
            raw_text = reply.raw_text
        else:
            raw_text = args
        exc = self.db.get(self.name, "exc", [])
        censtext = OCR.filterText(raw_text, exc=exc)
        if raw_text != censtext:
            await message.edit(self.strings["cens_yes"].replace("%text%", censtext))
        else:
            await message.edit(
                self.strings["cens_no"] + (censtext if not message.is_reply else "")
            )

    async def censlistcmd(self, message):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ —á–∞—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è"""
        ids = dict(self.db).get(self.name)
        if not ids:
            return await message.edit(self.strings["censlist_empty"])
        censlist = [
            f'<code>{x}</code>{"*" if ids[x]==2 else ""}'
            for x in ids
            if isinstance(x, int) and ids[x] > 0
        ]
        if not censlist:
            return await message.edit(self.strings["censlist_empty"])
        answer = " ".join(censlist)
        await message.edit(self.strings["censlist_cmd"].replace("%list%", answer))

    async def censoncmd(self, message):
        """.censon [<id>|<username>|*]
        –ó–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ç–æ–º —á–∞—Ç–µ, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
        –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ –ª—é–±–æ–º —á–∞—Ç–µ –ø–æ id –∏–ª–∏ username
        * –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —Å–≤–æ–∏)"""
        args = utils.get_args_raw(message)
        if args == "*":
            chat = message.chat
            if (
                not isinstance(chat, Channel)
                or not chat.admin_rights
                or not chat.admin_rights.delete_messages
            ):
                return await message.edit(self.strings["censon_not_admin"])
            flag = 2
            args = args[:-1]
        else:
            flag = 1
        if not args:
            id = utils.get_chat_id(message)
        elif args.isnumeric():
            id = int(args)
        else:
            try:
                id = (await self.client.get_entity(args)).id
            except Exception:
                return await message.edit(self.strings["censon_invalid"])
        self.db.set(self.name, id, flag)
        await message.edit(self.strings[f"censon_cmd_{flag}"].replace("%id%", str(id)))

    async def censoffcmd(self, message):
        """.censoff [<id>|<username>|all]
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ç–æ–º —á–∞—Ç–µ, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
        –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –ª—é–±–æ–º —á–∞—Ç–µ –ø–æ id –∏–ª–∏ username
        all –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö"""
        args = utils.get_args_raw(message)
        if args == "all":
            exc = self.db.get(self.name, "exc", [])
            del self.db[self.name]
            self.db.set(self.name, "exc", exc)
            return await message.edit(self.strings["censoff_all"])
        if not args:
            id = utils.get_chat_id(message)
        elif args.isnumeric():
            id = int(args)
        else:
            try:
                id = (await self.client.get_entity(args)).id
            except Exception:
                return await message.edit(self.strings["censon_invalid"])
        self.db.set(self.name, id, 0)
        await message.edit(self.strings["censoff_cmd"].replace("%id%", str(id)))

    async def censxcmd(self, message):
        """.censx [+ <text>|-]
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        –ò—Å–∫–ª—é—á–µ–Ω–∏—è –≤ text –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —á–µp–µ–∑ –ø—Ä–æ–±–µ–ª
        –ö–æ–º–∞–Ω–¥–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        args = utils.get_args(message)
        if len(args) == 1 and args[0] == "-":
            self.db.set(self.name, "exc", [])
            return await message.edit(self.strings["censx_del"])
        if len(args) > 1 and args[0] == "+":
            self.db.set(self.name, "exc", [x.lower() for x in args[1:]])
            return await message.edit(self.strings["censx_add"])
        if not args:
            exc = self.db.get(self.name, "exc", [])
            if not exc:
                return await message.edit(self.strings["censx_empty"])
            return await message.edit(
                self.strings["censx_cmd"].replace(
                    "%list%", " ".join([f"<code>{x}</code>" for x in exc])
                )
            )
        await message.edit(self.strings["censx_invalid"])

    async def watcher(self, event):
        if not isinstance(event, Message):
            return
        id = utils.get_chat_id(event)
        flag = self.db.get(self.name, id, 0)
        if not flag or (flag == 1 and event.sender_id != self.me_id):
            return
        exc = self.db.get(self.name, "exc", [])
        censtext = OCR.filterText(event.raw_text, exc=exc)
        if censtext == event.raw_text:
            return
        message = event
        try:
            await event.delete()
        except Exception:
            chat = message.chat
            if (
                not isinstance(chat, Channel)
                or not chat.admin_rights
                or not chat.admin_rights.delete_messages
            ):
                self.db.set(self.name, id, 1)
                return await message.answer(self.strings["censon_not_admin"])
        if flag == 2 and event.sender_id != self.me_id:
            return
        message.text = censtext
        await self.client.send_message(id, event, reply_to=message.reply_to_msg_id)


class OCR:

    # —ç—Ç–æ –Ω–µ –æ–ø—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —ç—Ç–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ—Ç ObsceneCensorRus
    # —Å–ø–∏–∑–¥–∏–ª –∫–æ–¥ –æ—Ç—Å—é–¥–∞: https://github.com/vearutop/php-obscene-censor-rus
    # –∏ –≤—Å—ë –ø–µ—Ä–µ–ø–∏—Å–∞–ª –Ω–∞ –ø–∏—Ç–æ–Ω–µ, –≤—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã, —Ö—É–ª–∏
    # by xadjilut, 2021

    LT_P = "–ø–ünPp"
    LT_I = "–∏–òiI1u–Ü–òÃÅ–á—ñ–∏ÃÅ—ó"
    LT_E = "–µ–ïeE–ïÃÅ–µÃÅ"
    LT_D = "–¥–îdD"
    LT_Z = "–∑–ó3zZ3"
    LT_M = "–º–úmM"
    LT_U = "—É–£yYuU–£ÃÅ—ÉÃÅ"
    LT_O = "–æ–ûoO0–ûÃÅ–æÃÅ"
    LT_L = "–ª–õlL"
    LT_S = "—Å–°cCsS"
    LT_A = "–∞–êaA–êÃÅ–∞ÃÅ"
    LT_N = "–Ω–ùhH"
    LT_G = "–≥–ìgG"
    LT_CH = "—á–ß4"
    LT_K = "–∫–ökK"
    LT_C = "—Ü–¶cC"
    LT_R = "—Ä–†pPrR"
    LT_H = "—Ö–•xXhH"
    LT_YI = "–π–ôy"
    LT_YA = "—è–Ø–ØÃÅ—èÃÅ"
    LT_YO = "—ë–Å"
    LT_YU = "—é–Æ–ÆÃÅ—éÃÅ"
    LT_B = "–±–ë6bB"
    LT_T = "—Ç–¢tT"
    LT_HS = "—ä–™"
    LT_SS = "—å–¨"
    LT_Y = "—ã–´"

    exceptions = (
        "–∫–æ–º–∞–Ω–¥",
        "—Ä—É–±–ª",
        "–ø—Ä–µ–º—å",
        "–æ—Å–∫–æ—Ä–±",
        "–∫—Ä–∞—Å–Ω–æ—è—Ä",
        "–±–æ—è—Ä",
        "–Ω–æ—è–±—Ä",
        "–∫–∞—Ä—å–µ—Ä",
        "–º–∞–Ω–¥–∞—Ç",
        "—É–ø–æ—Ç—Ä",
        "–ø–ª–æ—Ö",
        "–∏–Ω—Ç–µ—Ä",
        "–≤–µ–µ—Ä",
        "—Ñ–∞–µ—Ä",
        "—Ñ–µ–µ—Ä",
        "hyundai",
        "—Ç–∞—Ç—É",
        "–±—Ä–∞–∫–æ–Ω—å",
        "roup",
        "—Å–∞—Ä–∞—Ñ",
        "–¥–µ—Ä–∂",
        "—Å–ª–∞–±",
        "—Ä–∏–¥–µ—Ä",
        "–∏—Å—Ç—Ä–µ–±",
        "–ø–æ—Ç—Ä–µ–±",
        "–∫–æ—Ä–∏–¥–æ—Ä",
        "sound",
        "–¥–µ—Ä–≥",
        "–ø–æ–¥–æ–±",
        "–∫–æ—Ä—Ä–∏–¥",
        "–¥—É–±–ª",
        "–∫—É—Ä—å–µ—Ä",
        "—ç–∫—Å—Ç",
        "try",
        "enter",
        "oun",
        "aube",
        "ibarg",
        "16",
        "kres",
        "–≥–ª—É–±",
        "ebay",
        "eeb",
        "shuy",
        "–∞–Ω—Å–∞–º",
        "cayenne",
        "ain",
        "oin",
        "—Ç—Ä—è—Å",
        "ubu",
        "uen",
        "uip",
        "oup",
        "–∫–æ—Ä–∞–±",
        "–±–æ–µ–ø",
        "–¥–µ–µ–ø—Ä",
        "—Ö—É–ª—å—Å",
        "een",
        "ee6",
        "ein",
        "—Å—É–≥—É–±",
        "–∫–∞—Ä–±",
        "–≥—Ä–æ–±",
        "–ª–∏—Ç—å",
        "—Ä—Å—É–∫",
        "–≤–ª—é–±",
        "—Ö—É–ª–∏–æ",
        "–ª—è–ø",
        "–≥—Ä–∞–±",
        "–∏–±–æ–≥",
        "–≤–µ–ª–æ",
        "–µ–±—ç",
        "–ø–µ—Ä–≤",
        "eep",
        "ying",
        "laun",
        "—á–∞–µ–ø–∏—Ç–∏–µ",
        "–æ–∑–ª–æ–±",
        "–∫–æ–∑–æ–ª—É–ø",
        "–≥—Ä—ë–±",
        "–≥—Ä–µ–±",
        "—Ç–µ–±",
        "—Å–µ–±",
        "–º–∞–Ω–¥–∞—Ä–∏–Ω",
        "—Å–∞–±–ª—è",
        "–∫–æ–ª–µ–±",
        "–æ–±–ª–∏—Ç",
        "—Å–æ–±–ª",
        "—Ö—É–ª–∞",
        "—Ö—É–ª—å–Ω",
        "–¥—Ä–æ–±–ª",
        "–æ–≥–ª–æ–±–ª",
        "–≥–ª–∞–∑–æ–ª—É–ø",
        "–¥–≤–æ–µ",
        "—Ç—Ä–æ–µ",
        "—è–±–µ–¥",
        "—è–±–ª–æ–Ω",
        "—è–±–ª–æ—á",
        "–∏–ø–æ—Å—Ç–∞—Å",
        "—Å–∫–∏–ø–∏–¥–∞—Ä",
        "–≤–µ—Ç—Ö—É—é",
        "–±–ª—è—à",
        "—Ö—É–ª–∏—Ç",
        "–µ–ø–∏—Å–∫–æ–ø",
        "—Ö—É–ª–∏–≤",
    )

    @staticmethod
    def filterText(text, charset="UTF-8", exc=()):
        utf8 = "UTF-8"

        if charset != utf8:
            text = text.decode(charset).encode(utf8)
            m = re.findall(
                r"\b\d*("
                "\w*["
                + OCR.LT_P
                + "]["
                + OCR.LT_I
                + OCR.LT_E
                + "]["
                + OCR.LT_Z
                + "]["
                + OCR.LT_D
                + "]\w*"  # –ø–∏–∑–¥–∞
                "|(?:[^"
                + OCR.LT_I
                + OCR.LT_U
                + "\s]+|"
                + OCR.LT_N
                + OCR.LT_I
                + ")?(?<!—Å—Ç—Ä–∞)["
                + OCR.LT_H
                + "]["
                + OCR.LT_U
                + "]["
                + OCR.LT_YI
                + OCR.LT_E
                + OCR.LT_YA
                + OCR.LT_YO
                + OCR.LT_I
                + OCR.LT_L
                + OCR.LT_YU
                + "](?!–∏–≥)\w*"  # —Ö—É–π; –Ω–µ –ø—É—Å–∫–∞–µ—Ç "–ø–æ–¥—Å—Ç—Ä–∞—Ö—É–π", "—Ö—É–ª–∏–≥–∞–Ω"
                "|\w*["
                + OCR.LT_B
                + "]["
                + OCR.LT_L
                + "](?:["
                + OCR.LT_YA
                + "]+["
                + OCR.LT_D
                + OCR.LT_T
                + "]?"
                "|[" + OCR.LT_I + "]+[" + OCR.LT_D + OCR.LT_T + "]+"
                "|["
                + OCR.LT_I
                + "]+["
                + OCR.LT_A
                + "]+)(?!—Ö)\w*"  # –±–ª—è, –±–ª—è–¥—å; –Ω–µ –ø—É—Å–∫–∞–µ—Ç "–±–ª—è—Ö–∞"
                "|(?:\w*["
                + OCR.LT_YI
                + OCR.LT_U
                + OCR.LT_E
                + OCR.LT_A
                + OCR.LT_O
                + OCR.LT_HS
                + OCR.LT_SS
                + OCR.LT_Y
                + OCR.LT_YA
                + "]["
                + OCR.LT_E
                + OCR.LT_YO
                + OCR.LT_YA
                + OCR.LT_I
                + "]["
                + OCR.LT_B
                + OCR.LT_P
                + "](?!—ã\b|–æ–ª)\w*"  # –Ω–µ –ø—É—Å–∫–∞–µ—Ç "–µ—ë–±—ã", "–Ω–∞–∏–±–æ–ª–µ–µ", "–Ω–∞–∏–±–æ–ª—å—à–µ–µ"...
                "|[" + OCR.LT_E + OCR.LT_YO + "][" + OCR.LT_B + "]\w*"
                "|[" + OCR.LT_I + "][" + OCR.LT_B + "][" + OCR.LT_A + "]\w+"
                "|["
                + OCR.LT_YI
                + "]["
                + OCR.LT_O
                + "]["
                + OCR.LT_B
                + OCR.LT_P
                + "]\w*)"  # –µ–±–∞—Ç—å
                #'|\w*[' + OCR.LT_S + '][' + OCR.LT_C + ']?[' + OCR.LT_U + ']+(?:[' + OCR.LT_CH + ']*[' + OCR.LT_K + ']+'
                #'|[' + OCR.LT_CH + ']+[' + OCR.LT_K + ']*)[' + OCR.LT_A + OCR.LT_O + ']\w*' # —Å—É–∫–∞
                "|\w*(?:["
                + OCR.LT_P
                + "]["
                + OCR.LT_I
                + OCR.LT_E
                + "]["
                + OCR.LT_D
                + "]["
                + OCR.LT_A
                + OCR.LT_O
                + OCR.LT_E
                + "]?["
                + OCR.LT_R
                + "](?!–æ)\w*"  # –Ω–µ –ø—É—Å–∫–∞–µ—Ç "–ü–µ–¥—Ä–æ"
                "|["
                + OCR.LT_P
                + "]["
                + OCR.LT_E
                + "]["
                + OCR.LT_D
                + "]["
                + OCR.LT_E
                + OCR.LT_I
                + "]?["
                + OCR.LT_G
                + OCR.LT_K
                + "])"  # –ø–∏–¥–∞—Ä–∞—Å
                "|\w*["
                + OCR.LT_Z
                + "]["
                + OCR.LT_A
                + OCR.LT_O
                + "]["
                + OCR.LT_L
                + "]["
                + OCR.LT_U
                + "]["
                + OCR.LT_P
                + "]\w*"  # –∑–∞–ª—É–ø–∞
                "|\w*["
                + OCR.LT_M
                + "]["
                + OCR.LT_A
                + "]["
                + OCR.LT_N
                + "]["
                + OCR.LT_D
                + "]["
                + OCR.LT_A
                + OCR.LT_O
                + "]\w*"  # –º–∞–Ω–¥–∞
                "|\w*["
                + OCR.LT_G
                + "]["
                + OCR.LT_O
                + OCR.LT_A
                + "]["
                + OCR.LT_N
                + "]["
                + OCR.LT_D
                + "]["
                + OCR.LT_O
                + "]["
                + OCR.LT_N
                + "]\w*"  # –≥–æ–Ω–¥–æ–Ω
                ")",
                text,
            )

        c = len(m)

        # exclusion=array('—Ö–ª–µ–±–∞','–Ω–∞–∏–±–æ–ª–µ–µ');
        # m[1]=array_diff($m[1],$exclusion);

        if c:
            i = 0
            xwords = []
            while i < c:
                # if i >= c: break
                word_orig = m[i]
                word = word_orig.lower()

                for x in OCR.exceptions + tuple(exc):
                    if x in word:
                        word = False
                        del m[i]
                        xwords.append(word_orig)
                        i -= 1
                        c -= 1
                        break

                if word:
                    m[i] = "".join(
                        [
                            (
                                ""
                                if x in (" ", ",", ";", ".", "!", "-", "?", "\t", "\n")
                                else x
                            )
                            for x in list(m[i])
                        ]
                    )

                i += 1

            m = set(m)

            asterisks = ["*" * len(word) for word in m]
            _xwords = " ".join(xwords)
            for x, y in zip(m, asterisks):
                text = text.replace(x, y)
                _xwords = _xwords.replace(x, y)

            for x, y in zip(_xwords.split(), xwords):
                text = text.replace(x, y)

        return text
